<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MultiLeapWrapper</name>
    </assembly>
    <members>
        <member name="T:Leap.Arm">
            <summary>
            The Arm class represents the forearm.
            </summary>
        </member>
        <member name="M:Leap.Arm.#ctor">
            <summary>
            Constructs a default Arm object.
            Get valid Arm objects from a Hand object.
            
            @since 2.0.3
            </summary>
        </member>
        <member name="M:Leap.Arm.#ctor(Leap.Vector,Leap.Vector,Leap.Vector,Leap.Vector,System.Single,System.Single,Leap.LeapQuaternion)">
            <summary>
            Constructs a new Arm object. 
            @since 3.0 
            </summary>
        </member>
        <member name="M:Leap.Arm.Equals(Leap.Arm)">
            <summary>
            Compare Arm object equality.
            Two Arm objects are equal if and only if both Arm objects represent the
            exact same physical arm in the same frame and both Arm objects are valid.
            @since 2.0.3
            </summary>
        </member>
        <member name="M:Leap.Arm.ToString">
            <summary>
            A string containing a brief, human readable description of the Arm object.
            @since 2.0.3
            </summary>
        </member>
        <member name="P:Leap.Arm.ElbowPosition">
            <summary>
            The position of the elbow.
            If not in view, the elbow position is estimated based on typical human
            anatomical proportions.
            
            @since 2.0.3
            </summary>
        </member>
        <member name="P:Leap.Arm.WristPosition">
            <summary>
            The position of the wrist.
            
            Note that the wrist position is not collocated with the end of any bone in
            the hand. There is a gap of a few centimeters since the carpal bones are
            not included in the skeleton model.
            
            @since 2.0.3
            </summary>
        </member>
        <member name="T:Leap.Bone">
            <summary>
            The Bone class represents a tracked bone.
            
            All fingers contain 4 bones that make up the anatomy of the finger.
            Get valid Bone objects from a Finger object.
            
            Bones are ordered from base to tip, indexed from 0 to 3.  Additionally, the
            bone's Type enum may be used to index a specific bone anatomically.
            
            The thumb does not have a base metacarpal bone and therefore contains a valid,
            zero length bone at that location.
            @since 2.0
            </summary>
        </member>
        <member name="M:Leap.Bone.#ctor">
            <summary>
            Constructs a default invalid Bone object.
            
            @since 2.0
            </summary>
        </member>
        <member name="M:Leap.Bone.#ctor(Leap.Vector,Leap.Vector,Leap.Vector,Leap.Vector,System.Single,System.Single,Leap.Bone.BoneType,Leap.LeapQuaternion)">
            <summary>
            Constructs a new Bone object.
            @since 3.0
            </summary>
        </member>
        <member name="M:Leap.Bone.Equals(Leap.Bone)">
            <summary>
            Compare Bone object equality.
            
            Two Bone objects are equal if and only if both Bone objects represent the
            exact same physical bone in the same frame and both Bone objects are valid.
            @since 2.0
            </summary>
        </member>
        <member name="M:Leap.Bone.ToString">
            <summary>
            A string containing a brief, human readable description of the Bone object.
            @since 2.0
            </summary>
        </member>
        <member name="F:Leap.Bone.PrevJoint">
            <summary>
            The base of the bone, closest to the wrist.
            In anatomical terms, this is the proximal end of the bone.
            @since 2.0
            </summary>
        </member>
        <member name="F:Leap.Bone.NextJoint">
            <summary>
            The end of the bone, closest to the finger tip.
            In anatomical terms, this is the distal end of the bone.
            @since 2.0
            </summary>
        </member>
        <member name="F:Leap.Bone.Center">
            <summary>
            The midpoint of the bone. 
            @since 2.0 
            </summary>
        </member>
        <member name="F:Leap.Bone.Direction">
            <summary>
            The normalized direction of the bone from base to tip.
            @since 2.0
            </summary>
        </member>
        <member name="F:Leap.Bone.Length">
            <summary>
            The estimated length of the bone.
            @since 2.0
            </summary>
        </member>
        <member name="F:Leap.Bone.Width">
            <summary>
            The average width of the flesh around the bone.
            @since 2.0
            </summary>
        </member>
        <member name="F:Leap.Bone.Type">
            <summary>
            The type of this bone.
            @since 2.0
            </summary>
        </member>
        <member name="F:Leap.Bone.Rotation">
            <summary>
            The orientation of this Bone as a Quaternion.
            @since 2.0
            </summary>
        </member>
        <member name="P:Leap.Bone.Basis">
            <summary>
            The orthonormal basis vectors for this Bone as a Matrix.
            The orientation of this Bone as a Quaternion.
            
            Basis vectors specify the orientation of a bone.
            
            **xBasis** Perpendicular to the longitudinal axis of the
              bone; exits the sides of the finger.
            
            **yBasis or up vector** Perpendicular to the longitudinal
              axis of the bone; exits the top and bottom of the finger. More positive
              in the upward direction.
            
            **zBasis** Aligned with the longitudinal axis of the bone.
              More positive toward the base of the finger.
            
            The bases provided for the right hand use the right-hand rule; those for
            the left hand use the left-hand rule. Thus, the positive direction of the
            x-basis is to the right for the right hand and to the left for the left
            hand. You can change from right-hand to left-hand rule by multiplying the
            z basis vector by -1.
            
            You can use the basis vectors for such purposes as measuring complex
            finger poses and skeletal animation.
            
            Note that converting the basis vectors directly into a quaternion
            representation is not mathematically valid. If you use quaternions,
            create them from the derived rotation matrix not directly from the bases.
            
            @since 2.0
            </summary>
        </member>
        <member name="T:Leap.Bone.BoneType">
            <summary>
            Enumerates the type of bones.
            
            Members of this enumeration are returned by Bone.Type() to identify a
            Bone object.
            @since 2.0
            </summary>
        </member>
        <member name="M:Leap.CopyFromOtherExtensions.CopyFrom(Leap.Frame,Leap.Frame)">
             Copies the data from a source frame into a frame.  After the operation is
             complete, the frame will be identical to the source frame.
            
             @param source The source frame that is copied into a frame.
        </member>
        <member name="M:Leap.CopyFromOtherExtensions.CopyFrom(Leap.Finger,Leap.Finger)">
             Copies the data from a source finger into a finger.  After the operation is
             complete, the finger will be identical to the source finger.
            
             @param source The source finger that is copied into a finger.
        </member>
        <member name="M:Leap.CopyFromOtherExtensions.CopyFrom(Leap.Bone,Leap.Bone)">
             Copies the data from a source bone into a bone.  After the operation is
             complete, the bone will be identical to the source bone.
            
             @param source The source bone that is copied into a bone.
        </member>
        <member name="T:Leap.CSharpExtensions">
             <summary>
             Various C# extensions used by the Leap C# classes.
            
             @since 3.0
             </summary>
        </member>
        <member name="M:Leap.CSharpExtensions.NearlyEquals(System.Single,System.Single,System.Single)">
            <summary>
            Compares whether two floating point numbers are within an epsilon value of each other.
            @since 3.0
            </summary>
        </member>
        <member name="M:Leap.CSharpExtensions.HasMethod(System.Object,System.String)">
            <summary>
            Reports whether this object has the specified method.
            @since 3.0
            </summary>
        </member>
        <member name="M:Leap.CSharpExtensions.indexOf(System.Enum)">
            <summary>
            Returns the ordinal index of this enumeration item.
            @since 3.0
            </summary>
        </member>
        <member name="M:Leap.CSharpExtensions.itemFor``1(System.Int32)">
            <summary>
            Gets the item at the ordinal position in this enumeration.
            @since 3.0
            </summary>
        </member>
        <member name="M:Leap.CSharpExtensions.Dispatch``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Convenience function to consolidate event dispatching boilerplate code.
            @since 3.0
            </summary>
        </member>
        <member name="M:Leap.CSharpExtensions.DispatchOnContext``1(System.EventHandler{``0},System.Object,System.Threading.SynchronizationContext,``0)">
            <summary>
            Convenience function to consolidate event dispatching boilerplate code.
            Events are dispatched on the message queue of a threads' synchronization
            context, if possible.
            @since 3.0
            </summary>
        </member>
        <member name="T:Leap.Device">
            <summary>
            The Device class represents a physically connected device.
            
            The Device class contains information related to a particular connected
            device such as device id, field of view relative to the device,
            and the position and orientation of the device in relative coordinates.
            
            The position and orientation describe the alignment of the device relative to the user.
            The alignment relative to the user is only descriptive. Aligning devices to users
            provides consistency in the parameters that describe user interactions.
            
            Note that Device objects can be invalid, which means that they do not contain
            valid device information and do not correspond to a physical device.
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Device.#ctor">
            <summary>
            Constructs a default Device object.
            
            Get valid Device objects from a DeviceList object obtained using the
            Controller.Devices() method.
            
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Device.Update(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Leap.Device.Update(Leap.Device)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:Leap.Device.Handle">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Leap.Device.Equals(Leap.Device)">
            <summary>
            Compare Device object equality. 
            
            Two Device objects are equal if and only if both Device objects represent the 
            exact same Device and both Devices are valid. 
            
            @since 1.0 
            </summary>
        </member>
        <member name="M:Leap.Device.ToString">
            <summary>
            A string containing a brief, human readable description of the Device object.
            @since 1.0
            </summary>
        </member>
        <member name="P:Leap.Device.HorizontalViewAngle">
            <summary>
            The angle in radians of view along the x axis of this device.
            
            The Leap Motion controller scans a region in the shape of an inverted pyramid
            centered at the device's center and extending upwards. The horizontalViewAngle
            reports the view angle along the long dimension of the device.
            
            @since 1.0
            </summary>
        </member>
        <member name="P:Leap.Device.VerticalViewAngle">
            <summary>
            The angle in radians of view along the z axis of this device.
            
            The Leap Motion controller scans a region in the shape of an inverted pyramid
            centered at the device's center and extending upwards. The verticalViewAngle
            reports the view angle along the short dimension of the device.
            
            @since 1.0
            </summary>
        </member>
        <member name="P:Leap.Device.Range">
            <summary>
            The maximum reliable tracking range from the center of this device.
            
            The range reports the maximum recommended distance from the device center
            for which tracking is expected to be reliable. This distance is not a hard limit.
            Tracking may be still be functional above this distance or begin to degrade slightly
            before this distance depending on calibration and extreme environmental conditions.
            
            @since 1.0
            </summary>
        </member>
        <member name="P:Leap.Device.Baseline">
            <summary>
            The distance in mm between the center points of the stereo sensors.
            
            The baseline value, together with the maximum resolution, influence the
            maximum range.
            
            @since 2.2.5
            </summary>
        </member>
        <member name="P:Leap.Device.IsStreaming">
            <summary>
            Reports whether this device is streaming data to your application.
            
            Currently only one controller can provide data at a time.
            @since 1.2
            </summary>
        </member>
        <member name="P:Leap.Device.Type">
            <summary>
            The device type.
            
            Use the device type value in the (rare) circumstances that you
            have an application feature which relies on a particular type of device.
            Current types of device include the original Leap Motion peripheral,
            keyboard-embedded controllers, and laptop-embedded controllers.
            
            @since 1.2
            </summary>
        </member>
        <member name="P:Leap.Device.SerialNumber">
            <summary>
            An alphanumeric serial number unique to each device.
            
            Consumer device serial numbers consist of 2 letters followed by 11 digits.
            
            When using multiple devices, the serial number provides an unambiguous
            identifier for each device.
            @since 2.2.2
            </summary>
        </member>
        <member name="P:Leap.Device.IsSmudged">
            <summary>
            The software has detected a possible smudge on the translucent cover
            over the Leap Motion cameras.
            
            Not implemented yet.
            @since 3.0
            </summary>
        </member>
        <member name="P:Leap.Device.IsLightingBad">
            <summary>
            The software has detected excessive IR illumination, which may interfere 
            with tracking. If robust mode is enabled, the system will enter robust mode when 
            isLightingBad() is true. 
            
            Not implemented yet. 
            @since 3.0 
            </summary>
        </member>
        <member name="T:Leap.Device.DeviceType">
            <summary>
            The available types of Leap Motion controllers.
            </summary>
        </member>
        <member name="F:Leap.Device.DeviceType.TYPE_PERIPHERAL">
            <summary>
            A standalone USB peripheral. The original Leap Motion controller device.
            @since 1.2
            </summary>
        </member>
        <member name="F:Leap.Device.DeviceType.TYPE_DRAGONFLY">
            <summary>
            Internal research product codename "Dragonfly".
            </summary>
        </member>
        <member name="F:Leap.Device.DeviceType.TYPE_NIGHTCRAWLER">
            <summary>
            Internal research product codename "Nightcrawler".
            </summary>
        </member>
        <member name="F:Leap.Device.DeviceType.TYPE_RIGEL">
            <summary>
            Research product codename "Rigel".
            </summary>
        </member>
        <member name="T:Leap.Finger">
            <summary>
            The Finger class represents a tracked finger.
            
            Fingers are objects that the Leap Motion software has classified as a finger.
            Get valid Finger objects from a Frame or a Hand object.
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Finger.#ctor">
            <summary>
            Constructs a finger.
            
            An uninitialized finger is considered invalid.
            Get valid Finger objects from a Hand object.
            
            @since 3.0
            </summary>
        </member>
        <member name="M:Leap.Finger.#ctor(System.Int64,System.Int32,System.Int32,System.Single,Leap.Vector,Leap.Vector,System.Single,System.Single,System.Boolean,Leap.Finger.FingerType,Leap.Bone,Leap.Bone,Leap.Bone,Leap.Bone)">
            <summary>
            Constructs a finger.
            
            Generally, you should not create your own finger objects. Such objects will not
            have valid tracking data. Get valid finger objects from a hand in a frame
            received from the service.
            @since 3.0
            </summary>
        </member>
        <member name="M:Leap.Finger.Bone(Leap.Bone.BoneType)">
            <summary>
            The bone at a given bone index on this finger.
            @since 2.0
            </summary>
        </member>
        <member name="M:Leap.Finger.ToString">
            <summary>
            A string containing a brief, human readable description of the Finger object.
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Finger.Type">
            <summary>
            The type of this finger.
            @since 2.0
            </summary>
        </member>
        <member name="F:Leap.Finger.Id">
            <summary>
            A unique ID assigned to this Finger object, whose value remains the
            same across consecutive frames while the tracked hand remains visible. 
            If tracking of the hand is lost, the Leap Motion software may assign a 
            new ID when it detects the hand in a future frame.
            
            Use the ID value to find this Finger object in future frames.
            
            IDs should be from 1 to 100 (inclusive). If more than 100 objects are tracked
            an IDs of -1 will be used until an ID in the defined range is available.
            
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Finger.HandId">
            <summary>
            The Hand associated with a finger.
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Finger.TipPosition">
            <summary>
            The tip position of this Finger.
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Finger.Direction">
            <summary>
            The direction in which this finger or tool is pointing. The direction is expressed 
            as a unit vector pointing in the same direction as the tip.
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Finger.Width">
            <summary>
            The estimated width of the finger.
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Finger.Length">
            <summary>
            The estimated length of the finger.
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Finger.IsExtended">
            <summary>
            Whether or not this Finger is in an extended posture.
            
            A finger is considered extended if it is extended straight from the hand as if
            pointing. A finger is not extended when it is bent down and curled towards the
            palm.
            
            @since 2.0
            </summary>
        </member>
        <member name="F:Leap.Finger.TimeVisible">
            <summary>
            The duration of time this Finger has been visible to the Leap Motion Controller.
            @since 1.0
            </summary>
        </member>
        <member name="T:Leap.Finger.FingerType">
            <summary>
            Enumerates the names of the fingers.
            
            Members of this enumeration are returned by Finger.Type() to identify a
            Finger object.
            @since 2.0
            </summary>
        </member>
        <member name="T:Leap.Frame">
            <summary>
            The Frame class represents a set of hand and finger tracking data detected
            in a single frame.
            
            The Leap Motion software detects hands, fingers and tools within the tracking area, reporting
            their positions, orientations, gestures, and motions in frames at the Leap Motion frame rate.
            
            Access Frame objects through an instance of the Controller class.
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Frame.#ctor">
            <summary>
            Constructs a Frame object.
            
            Frame instances created with this constructor are invalid.
            Get valid Frame objects by calling the Controller.Frame() function.
            
            The only usage of this constructor is to use the class in templates.
            
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Frame.#ctor(System.UInt32)">
            <summary>
            Constructs a Frame object.
            
            Frame instances created with this constructor are invalid.
            Get valid Frame objects by calling the Controller.Frame() function.
            
            The only time you should use this constructor is before deserializing
            serialized frame data, or if you are going to be passing this Frame
            to a method that fills it with valid data.
            
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Frame.#ctor(System.Int64,System.Int64,System.Single,System.Collections.Generic.List{Leap.Hand})">
            <summary>
            Constructs a new Frame.
            @since 3.0
            </summary>
        </member>
        <member name="M:Leap.Frame.Hand(System.Int32)">
            <summary>
            The Hand object with the specified ID in this frame, or null if none
            exists.
            
            Use the Frame.Hand() function to retrieve the Hand object from 
            this frame using an ID value obtained from a previous frame. 
            This function always returns a Hand object, but if no hand 
            with the specified ID is present, an invalid Hand object is returned. 
            
            Note that ID values persist across frames, but only until tracking of a 
            particular object is lost. If tracking of a hand is lost and subsequently 
            regained, the new Hand object representing that physical hand may have 
            a different ID than that representing the physical hand in an earlier frame. 
            @since 1.0 </summary>
        </member>
        <member name="M:Leap.Frame.Equals(Leap.Frame)">
            <summary>
            Compare Frame object equality.
            
            Two Frame objects are equal if and only if both Frame objects represent
            the exact same frame of tracking data and both Frame objects are valid.
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Frame.ToString">
            <summary>
            A string containing a brief, human readable description of the Frame object.
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Frame.Id">
            <summary>
            A unique ID for this Frame.
            
            Consecutive frames processed by the Leap Motion software have consecutive
            increasing values. You can use the frame ID to avoid processing the same
            Frame object twice, as well as to make sure that your application processes 
            every frame.
            
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Frame.Timestamp">
            <summary>
            The frame capture time in microseconds elapsed since an arbitrary point in
            time in the past.
            
            You can use Controller.Now() to calculate the age of the frame.
            
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Frame.CurrentFramesPerSecond">
            <summary>
            The instantaneous framerate.
            
            The rate at which the Leap Motion software is providing frames of data
            (in frames per second). The framerate can fluctuate depending on available computing
            resources, activity within the device field of view, software tracking settings,
            and other factors.
            
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Frame.Hands">
            <summary>
            The list of Hand objects detected in this frame, given in arbitrary order.
            The list can be empty if no hands are detected.
            
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Frame.ResizeHandList(System.Int32)">
             <summary>
             Only used when constructing new frames manually.
            
             Resizes the Hand list to have a specific size. If the size is decreased,
             the removed hands are placed into the hand pool. If the size is
             increased, the new spaces are filled with hands taken from the hand pool.
             If the pool is empty, new hands are constructed instead.
             </summary>
        </member>
        <member name="F:Leap.Frame.DeviceID">
             <summary>
             The Device ID that this frame was seen from.
             
             1-Indexed; Non-Deterministic order
            
             Only valid when `supportsMultipleDevices` is true on the LeapProvider.
             
             @since 4.1
             </summary>
        </member>
        <member name="T:Leap.Hand">
            <summary>
            The Hand class reports the physical characteristics of a detected hand.
            
            Hand tracking data includes a palm position and velocity; vectors for
            the palm normal and direction to the fingers; and lists of the attached fingers.
            
            Note that Hand objects can be invalid, which means that they do not contain
            valid tracking data and do not correspond to a physical entity. Invalid Hand
            objects can be the result of using the default constructor, or modifying the
            hand data in an incorrect way.
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Hand.#ctor">
            <summary>
            Constructs a Hand object.
            
            An uninitialized hand is considered invalid.
            Get valid Hand objects from a Frame object.
            
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Hand.#ctor(System.Int64,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Single,Leap.Arm,System.Collections.Generic.List{Leap.Finger},Leap.Vector,Leap.Vector,Leap.Vector,Leap.Vector,Leap.LeapQuaternion,Leap.Vector,Leap.Vector)">
            <summary>
            Constructs a hand.
            
            Generally, you should not create your own Hand objects. Such objects will not
            have valid tracking data. Get valid Hand objects from a frame
            received from the service.
            @since 3.0
            </summary>
        </member>
        <member name="M:Leap.Hand.Finger(System.Int32)">
            <summary>
            The Finger object with the specified ID attached to this hand.
            
            Use the Hand.Finger() function to retrieve a Finger object attached to
            this hand using an ID value obtained from a previous frame.
            
            Note that ID values persist across frames, but only until tracking of a
            particular object is lost. If tracking of a hand is lost and subsequently
            regained, the new Finger object representing that finger may have a
            different ID than that representing the finger in an earlier frame.
            
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Hand.Equals(Leap.Hand)">
            <summary>
            Compare Hand object equality.
            
            Two Hand objects are equal if and only if both Hand objects represent the
            exact same physical hand in the same frame and both Hand objects are valid.
            </summary>
        </member>
        <member name="M:Leap.Hand.ToString">
            <summary>
            A string containing a brief, human readable description of the Hand object.
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Hand.Id">
            <summary>
            A unique ID assigned to this Hand object, whose value remains the same
            across consecutive frames while the tracked hand remains visible. If
            tracking is lost (for example, when a hand is occluded by another hand
            or when it is withdrawn from or reaches the edge of the Leap Motion Controller field of view),
            the Leap Motion software may assign a new ID when it detects the hand in a future frame.
            
            Use the ID value with the Frame.Hand() function to find this Hand object
            in future frames.
            
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Hand.Fingers">
            <summary>
            The list of Finger objects detected in this frame that are attached to
            this hand, given in order from thumb to pinky.  The list cannot be empty.
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Hand.PalmPosition">
            <summary>
            The center position of the palm.
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Hand.PalmVelocity">
            <summary>
            The rate of change of the palm position.
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Hand.PalmNormal">
            <summary>
            The normal vector to the palm. If your hand is flat, this vector will
            point downward, or "out" of the front surface of your palm.
            
            The direction is expressed as a unit vector pointing in the same
            direction as the palm normal (that is, a vector orthogonal to the palm).
            
            You can use the palm normal vector to compute the roll angle of the palm with
            respect to the horizontal plane.
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Hand.Direction">
            <summary>
            The direction from the palm position toward the fingers.
            
            The direction is expressed as a unit vector pointing in the same
            direction as the directed line from the palm position to the fingers.
            
            You can use the palm direction vector to compute the pitch and yaw angles of the palm with
            respect to the horizontal plane.
            @since 1.0
            </summary>
        </member>
        <member name="P:Leap.Hand.Basis">
            <summary>
            The transform of the hand.
            
            Note, in version prior to 3.1, the Basis was a Matrix object.
            @since 3.1
            </summary>
        </member>
        <member name="F:Leap.Hand.Rotation">
            <summary>
            The rotation of the hand as a quaternion.
            
            @since 3.1
            </summary>
        </member>
        <member name="F:Leap.Hand.GrabStrength">
            <summary>
            The strength of a grab hand pose.
            
            The strength is zero for an open hand, and blends to one when a grabbing hand
            pose is recognized.
            @since 2.0
            </summary>
        </member>
        <member name="F:Leap.Hand.GrabAngle">
            <summary>
            The angle between the fingers and the hand of a grab hand pose.
            
            The angle is computed by looking at the angle between the direction of the
            4 fingers and the direction of the hand. Thumb is not considered when
            computing the angle.
            The angle is 0 radian for an open hand, and reaches pi radians when the pose
            is a tight fist.
            
            @since 3.0
            </summary>
        </member>
        <member name="F:Leap.Hand.PinchStrength">
            <summary>
            The holding strength of a pinch hand pose.
            
            The strength is zero for an open hand, and blends to one when a pinching
            hand pose is recognized. Pinching can be done between the thumb
            and any other finger of the same hand.
            @since 2.0
            </summary>
        </member>
        <member name="F:Leap.Hand.PinchDistance">
            <summary>
            The distance between the thumb and index finger of a pinch hand pose.
            
            The distance is computed by looking at the shortest distance between
            the last 2 phalanges of the thumb and those of the index finger.
            This pinch measurement only takes thumb and index finger into account.
            @since 3.0
            </summary>
        </member>
        <member name="F:Leap.Hand.PalmWidth">
            <summary>
            The estimated width of the palm when the hand is in a flat position.
            @since 2.0
            </summary>
        </member>
        <member name="F:Leap.Hand.StabilizedPalmPosition">
            <summary>
            The stabilized palm position of this Hand.
            
            Smoothing and stabilization is performed in order to make
            this value more suitable for interaction with 2D content. The stabilized
            position lags behind the palm position by a variable amount, depending
            primarily on the speed of movement.
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Hand.WristPosition">
            <summary>
            The position of the wrist of this hand.
            @since 2.0.3
            </summary>
        </member>
        <member name="F:Leap.Hand.TimeVisible">
            <summary>
            The duration of time this Hand has been visible to the Leap Motion Controller.
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Hand.Confidence">
            <summary>
            How confident we are with a given hand pose.
            The confidence level ranges between 0.0 and 1.0 inclusive.
            
            @since 2.0
            </summary>
        </member>
        <member name="F:Leap.Hand.IsLeft">
            <summary>
            Identifies whether this Hand is a left hand.
            @since 2.0
            </summary>
        </member>
        <member name="P:Leap.Hand.IsRight">
            <summary>
            Identifies whether this Hand is a right hand.
            @since 2.0
            </summary>
        </member>
        <member name="F:Leap.Hand.Arm">
            <summary>
            The arm to which this hand is attached.
            
            If the arm is not completely in view, Arm attributes are estimated based on
            the attributes of entities that are in view combined with typical human anatomy.
            @since 2.0.3
            </summary>
        </member>
        <member name="T:Leap.LeapQuaternion">
            <summary>
            The LeapQuaternion struct represents a rotation in three-dimensional space.
            @since 3.1.2
            </summary>
        </member>
        <member name="M:Leap.LeapQuaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new LeapQuaternion with the specified component values.
            @since 3.1.2
            </summary>
        </member>
        <member name="M:Leap.LeapQuaternion.#ctor(Leap.LeapQuaternion)">
            <summary>
            Copies the specified LeapQuaternion.
            @since 3.1.2
            </summary>
        </member>
        <member name="M:Leap.LeapQuaternion.#ctor(LeapInternal.LEAP_QUATERNION)">
            <summary>
            Copies the specified LEAP_QUATERNION.
            @since 3.1.2
            </summary>
        </member>
        <member name="M:Leap.LeapQuaternion.ToString">
            <summary>
            Returns a string containing this quaternion in a human readable format: (x, y, z).
            @since 3.1.2
            </summary>
        </member>
        <member name="M:Leap.LeapQuaternion.Equals(Leap.LeapQuaternion)">
            <summary>
            Compare LeapQuaternion equality component-wise.
            @since 3.1.2
            </summary>
        </member>
        <member name="M:Leap.LeapQuaternion.IsValid">
            <summary>
            Returns true if all of the quaternion's components are finite.  If any
            component is NaN or infinite, then this returns false.
            @since 3.1.2
            </summary>
        </member>
        <member name="P:Leap.LeapQuaternion.Magnitude">
            <summary>
            The magnitude, or length, of this quaternion.
            @since 3.1.2
            </summary>
        </member>
        <member name="P:Leap.LeapQuaternion.MagnitudeSquared">
            <summary>
            The square of the magnitude, or length, of this quaternion.
            @since 3.1.2
            </summary>
        </member>
        <member name="P:Leap.LeapQuaternion.Normalized">
            <summary>
            A normalized copy of this quaternion.
            @since 3.1.2
            </summary>
        </member>
        <member name="M:Leap.LeapQuaternion.Multiply(Leap.LeapQuaternion)">
            <summary>
            Concatenates the rotation described by this quaternion with the one provided
            and returns the result.
            @since 3.1.2
            </summary>
        </member>
        <member name="F:Leap.LeapQuaternion.Identity">
            <summary>
            The identity quaternion.
            @since 3.1.2 
            </summary>
        </member>
        <member name="T:Leap.LeapTransform">
            <summary>
            The LeapTransform class represents a transform in three dimensional space.
            
            Note that the LeapTransform class replaces the Leap.Matrix class.
            @since 3.1.2
            </summary>
        </member>
        <member name="M:Leap.LeapTransform.#ctor(Leap.Vector,Leap.LeapQuaternion)">
            <summary>
            Constructs a new transform from the specified translation and rotation.
            @since 3.1.2
            </summary>
        </member>
        <member name="M:Leap.LeapTransform.#ctor(Leap.Vector,Leap.LeapQuaternion,Leap.Vector)">
            <summary>
            Constructs a new transform from the specified translation, rotation and scale.
            @since 3.1.2
            </summary>
        </member>
        <member name="M:Leap.LeapTransform.TransformPoint(Leap.Vector)">
            <summary>
            Transforms the specified position vector, applying translation, rotation and scale.
            @since 3.1.2
            </summary>
        </member>
        <member name="M:Leap.LeapTransform.TransformDirection(Leap.Vector)">
            <summary>
            Transforms the specified direction vector, applying rotation only.
            @since 3.1.2
            </summary>
        </member>
        <member name="M:Leap.LeapTransform.TransformVelocity(Leap.Vector)">
            <summary>
            Transforms the specified velocity vector, applying rotation and scale.
            @since 3.1.2
            </summary>
        </member>
        <member name="M:Leap.LeapTransform.TransformQuaternion(Leap.LeapQuaternion)">
             <summary>
             Transforms the specified quaternion.
             Multiplies the quaternion representing the rotational part of this transform by the specified
             quaternion.
            
             **Important:** Modifying the basis vectors of this transform directly leaves the underlying quaternion in
             an indeterminate state. Neither this function nor the LeapTransform.rotation quaternion can be used after
             the basis vectors are set.
            
             @since 3.1.2
             </summary>
        </member>
        <member name="M:Leap.LeapTransform.MirrorX">
            <summary>
            Mirrors this transform's rotation and scale across the x-axis. Translation is not affected.
            @since 3.1.2
            </summary>
        </member>
        <member name="M:Leap.LeapTransform.MirrorZ">
            <summary>
            Mirrors this transform's rotation and scale across the z-axis. Translation is not affected.
            @since 3.1.2
            </summary>
        </member>
        <member name="P:Leap.LeapTransform.xBasis">
             <summary>
             The x-basis of the transform.
            
             **Important:** Modifying the basis vectors of this transform directly leaves the underlying quaternion in
             an indeterminate state. Neither the TransformQuaternion() function nor the LeapTransform.rotation quaternion
              can be used after the basis vectors are set.
            
             @since 3.1.2
             </summary>
        </member>
        <member name="P:Leap.LeapTransform.yBasis">
             <summary>
             The y-basis of the transform.
            
             **Important:** Modifying the basis vectors of this transform directly leaves the underlying quaternion in
             an indeterminate state. Neither the TransformQuaternion() function nor the LeapTransform.rotation quaternion
              can be used after the basis vectors are set.
            
             @since 3.1.2
             </summary>
        </member>
        <member name="P:Leap.LeapTransform.zBasis">
             <summary>
             The z-basis of the transform.
            
             **Important:** Modifying the basis vectors of this transform directly leaves the underlying quaternion in
             an indeterminate state. Neither the TransformQuaternion() function nor the LeapTransform.rotation quaternion
              can be used after the basis vectors are set.
            
             @since 3.1.2
             </summary>
        </member>
        <member name="P:Leap.LeapTransform.translation">
            <summary>
            The translation component of the transform.
            @since 3.1.2
            </summary>
        </member>
        <member name="P:Leap.LeapTransform.scale">
            <summary>
            The scale factors of the transform.
            Scale is kept separate from translation.
            @since 3.1.2
            </summary>
        </member>
        <member name="P:Leap.LeapTransform.rotation">
             <summary>
             The rotational component of the transform.
            
             **Important:** Modifying the basis vectors of this transform directly leaves the underlying quaternion in
             an indeterminate state. This rotation quaternion cannot be accessed after
             the basis vectors are modified directly.
            
             @since 3.1.2
             </summary>
        </member>
        <member name="F:Leap.LeapTransform.Identity">
            <summary>
            The identity transform.
            @since 3.1.2
            </summary>
        </member>
        <member name="M:Leap.TransformExtensions.Transform(Leap.Frame,Leap.LeapTransform)">
             Does an in-place rigid transformation of a Frame.
            
             @param transform A LeapTransform containing the desired translation, rotation, and scale
             to be applied to the Frame.
        </member>
        <member name="M:Leap.TransformExtensions.TransformedCopy(Leap.Frame,Leap.LeapTransform)">
             Returns a new frame that is a copy of a frame, with an additional rigid
             transformation applied to it.
            
             @param transform The transformation to be applied to the copied frame.
        </member>
        <member name="M:Leap.TransformExtensions.Transform(Leap.Hand,Leap.LeapTransform)">
             Does an in-place rigid transformation of a Hand.
            
             @param transform A LeapTransform containing the desired translation, rotation, and scale
             to be applied to the Hand.
        </member>
        <member name="M:Leap.TransformExtensions.TransformedCopy(Leap.Hand,Leap.LeapTransform)">
             Returns a new hand that is a copy of a hand, with an additional rigid
             transformation applied to it.
            
             @param transform The transformation to be applied to the copied hand.
        </member>
        <member name="M:Leap.TransformExtensions.Transform(Leap.Finger,Leap.LeapTransform)">
             Does an in-place rigid transformation of a Finger.
            
             @param transform A LeapTransform containing the desired translation, rotation, and scale
             to be applied to the Finger.
        </member>
        <member name="M:Leap.TransformExtensions.TransformedCopy(Leap.Finger,Leap.LeapTransform)">
             Returns a new finger that is a copy of a finger, with an additional rigid
             transformation applied to it.
            
             @param transform The transformation to be applied to the copied finger.
        </member>
        <member name="M:Leap.TransformExtensions.Transform(Leap.Bone,Leap.LeapTransform)">
                 * Does an in-place rigid transformation of a Bone.
                 *
                 * @param transform A LeapTransform containing the desired translation, rotation, and scale
            -    *  to be applied to the bone.
        </member>
        <member name="M:Leap.TransformExtensions.TransformGivenJoints(Leap.Bone,Leap.LeapTransform)">
                 * Does an in-place rigid transformation of a Bone, assuming the joints have already been transformed.
                 *
                 * @param transform A LeapTransform containing the desired translation, rotation, and scale
            -    *  to be applied to the bone.
        </member>
        <member name="M:Leap.TransformExtensions.TransformedCopy(Leap.Bone,Leap.LeapTransform)">
             Returns a new bone that is a copy of a bone, with an additional rigid
             transformation applied to it.
            
             @param transform The transformation to be applied to the copied bone.
        </member>
        <member name="T:Leap.Constants">
            <summary>
            Constants used in Leap Motion math functions.
            </summary>
        </member>
        <member name="T:Leap.Vector">
            <summary>
            The Vector struct represents a three-component mathematical vector or point
            such as a direction or position in three-dimensional space.
            
            The Leap Motion software employs a right-handed Cartesian coordinate system.
            Values given are in units of real-world millimeters. The origin is centered
            at the center of the Leap Motion Controller. The x- and z-axes lie in the horizontal
            plane, with the x-axis running parallel to the long edge of the device.
            The y-axis is vertical, with positive values increasing upwards (in contrast
            to the downward orientation of most computer graphics coordinate systems).
            The z-axis has positive values increasing away from the computer screen.
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Vector.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new Vector with the specified component values.
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Vector.#ctor(Leap.Vector)">
            <summary>
            Copies the specified Vector.
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Vector.DistanceTo(Leap.Vector)">
            <summary>
            The distance between the point represented by this Vector
            object and a point represented by the specified Vector object.
            
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Vector.AngleTo(Leap.Vector)">
            <summary>
            The angle between this vector and the specified vector in radians.
            
            The angle is measured in the plane formed by the two vectors. The
            angle returned is always the smaller of the two conjugate angles.
            Thus A.angleTo(B) == B.angleTo(A) and is always a positive
            value less than or equal to pi radians (180 degrees).
            
            If either vector has zero length, then this function returns zero.
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Vector.Dot(Leap.Vector)">
            <summary>
            The dot product of this vector with another vector.
            
            The dot product is the magnitude of the projection of this vector
            onto the specified vector.
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Vector.Cross(Leap.Vector)">
            <summary>
            The cross product of this vector and the specified vector.
            
            The cross product is a vector orthogonal to both original vectors.
            It has a magnitude equal to the area of a parallelogram having the
            two vectors as sides. The direction of the returned vector is
            determined by the right-hand rule. Thus A.cross(B) == -B.cross(A).
            
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Vector.ToString">
            <summary>
            Returns a string containing this vector in a human readable format: (x, y, z).
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Vector.Equals(Leap.Vector)">
            <summary>
            Compare Vector equality component-wise.
            @since 1.0
            </summary>
        </member>
        <member name="M:Leap.Vector.IsValid">
            <summary>
            Returns true if all of the vector's components are finite.  If any
            component is NaN or infinite, then this returns false.
            @since 1.0
            </summary>
        </member>
        <member name="P:Leap.Vector.Item(System.UInt32)">
            <summary>
            Index vector components numerically.
            Index 0 is x, index 1 is y, and index 2 is z.
            @since 1.0
            </summary>
        </member>
        <member name="P:Leap.Vector.Magnitude">
            <summary>
            The magnitude, or length, of this vector.
            
            The magnitude is the L2 norm, or Euclidean distance between the origin and
            the point represented by the (x, y, z) components of this Vector object.
            @since 1.0
            </summary>
        </member>
        <member name="P:Leap.Vector.MagnitudeSquared">
            <summary>
            The square of the magnitude, or length, of this vector.
            @since 1.0
            </summary>
        </member>
        <member name="P:Leap.Vector.Pitch">
            <summary>
            The pitch angle in radians.
            
            Pitch is the angle between the negative z-axis and the projection of
            the vector onto the y-z plane. In other words, pitch represents rotation
            around the x-axis.
            If the vector points upward, the returned angle is between 0 and pi radians
            (180 degrees); if it points downward, the angle is between 0 and -pi radians.
            
            @since 1.0
            </summary>
        </member>
        <member name="P:Leap.Vector.Roll">
            <summary>
            The roll angle in radians.
            
            Roll is the angle between the y-axis and the projection of
            the vector onto the x-y plane. In other words, roll represents rotation
            around the z-axis. If the vector points to the left of the y-axis,
            then the returned angle is between 0 and pi radians (180 degrees);
            if it points to the right, the angle is between 0 and -pi radians.
            
            Use this function to get roll angle of the plane to which this vector is a
            normal. For example, if this vector represents the normal to the palm,
            then this function returns the tilt or roll of the palm plane compared
            to the horizontal (x-z) plane.
            
            @since 1.0
            </summary>
        </member>
        <member name="P:Leap.Vector.Yaw">
            <summary>
            The yaw angle in radians.
            
            Yaw is the angle between the negative z-axis and the projection of
            the vector onto the x-z plane. In other words, yaw represents rotation
            around the y-axis. If the vector points to the right of the negative z-axis,
            then the returned angle is between 0 and pi radians (180 degrees);
            if it points to the left, the angle is between 0 and -pi radians.
            
            @since 1.0
            </summary>
        </member>
        <member name="P:Leap.Vector.Normalized">
            <summary>
            A normalized copy of this vector.
            
            A normalized vector has the same direction as the original vector,
            but with a length of one.
            
            @since 1.0
            </summary>
        </member>
        <member name="F:Leap.Vector.Zero">
            <summary>
            The zero vector: (0, 0, 0)
            </summary>
        </member>
        <member name="F:Leap.Vector.Ones">
            <summary>
            The ones vector: (1, 1, 1)
            </summary>
        </member>
        <member name="F:Leap.Vector.XAxis">
            <summary>
            The x-axis unit vector: (1, 0, 0)
            </summary>
        </member>
        <member name="F:Leap.Vector.YAxis">
            <summary>
            The y-axis unit vector: (0, 1, 0)
            </summary>
        </member>
        <member name="F:Leap.Vector.ZAxis">
            <summary>
            The z-axis unit vector: (0, 0, 1)
            </summary>
        </member>
        <member name="F:Leap.Vector.Forward">
            <summary>
            The unit vector pointing forward along the negative z-axis: (0, 0, -1)
            </summary>
        </member>
        <member name="F:Leap.Vector.Backward">
            <summary>
            The unit vector pointing backward along the positive z-axis: (0, 0, 1)
            </summary>
        </member>
        <member name="F:Leap.Vector.Left">
            <summary>
            The unit vector pointing left along the negative x-axis: (-1, 0, 0)
            </summary>
        </member>
        <member name="F:Leap.Vector.Right">
            <summary>
            The unit vector pointing right along the positive x-axis: (1, 0, 0)
            </summary>
        </member>
        <member name="F:Leap.Vector.Up">
            <summary>
            The unit vector pointing up along the positive y-axis: (0, 1, 0)
            </summary>
        </member>
        <member name="F:Leap.Vector.Down">
            <summary>
            The unit vector pointing down along the negative y-axis: (0, -1, 0)
            </summary>
        </member>
        <member name="M:LeapInternal.CopyFromLeapCExtensions.CopyFrom(Leap.Frame,LeapInternal.LEAP_TRACKING_EVENT@)">
             Copies the data from an internal tracking message into a frame.
            
             @param trackingMsg The internal tracking message with the data to be copied into this frame.
        </member>
        <member name="M:LeapInternal.CopyFromLeapCExtensions.CopyFrom(Leap.Hand,LeapInternal.LEAP_HAND@,System.Int64)">
             Copies the data from an internal hand definition into a hand.
            
             @param leapHand The internal hand definition to be copied into this hand.
             @param frameId The frame id of the frame this hand belongs to.
        </member>
        <member name="M:LeapInternal.CopyFromLeapCExtensions.CopyFrom(Leap.Finger,LeapInternal.LEAP_DIGIT,Leap.Finger.FingerType,System.Int32,System.Single)">
             Copies the data from an internal finger definition into a finger.
            
             @param leapBone The internal finger definition to be copied into this finger.
             @param type The finger type of this finger.
             @param frameId The frame id of the frame this finger belongs to.
             @param handId The hand id of the hand this finger belongs to.
             @param timeVisible The time in seconds that this finger has been visible.
        </member>
        <member name="M:LeapInternal.CopyFromLeapCExtensions.CopyFrom(Leap.Bone,LeapInternal.LEAP_BONE,Leap.Bone.BoneType)">
             Copies the data from an internal bone definition into a bone.
            
             @param leapBone The internal bone definition to be copied into this bone.
             @param type The bone type of this bone.
        </member>
        <member name="F:LeapInternal.eLeapConnectionFlag.eLeapConnectionFlag_MultipleDevicesAware">
            <summary>
            Allows subscription to multiple devices
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapConnectionStatus.NotConnected">
            <summary>
            A connection has been established.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapConnectionStatus.Connected">
            <summary>
            The connection has not been completed. Call OpenConnection.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapConnectionStatus.HandshakeIncomplete">
            <summary>
            The connection handshake has not completed.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapConnectionStatus.NotRunning">
            <summary>
            A connection could not be established because the server does not appear to be running.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceCaps.eLeapDeviceCaps_Color">
            <summary>
            The device can send color images.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceType.eLeapDeviceType_Peripheral">
            <summary>
            The Leap Motion consumer peripheral
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceType.eLeapDeviceType_Dragonfly">
            <summary>
            Internal research product codename "Dragonfly".
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceType.eLeapDeviceType_Nightcrawler">
            <summary>
            Internal research product codename "Nightcrawler".
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceType.eLeapDevicePID_Rigel">
            <summary>
            Research product codename "Rigel".
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapServiceDisposition.eLeapServiceState_LowFpsDetected">
            <summary>
            The service cannot receive frames fast enough from the underlying hardware.
            @since 3.1.3
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapServiceDisposition.eLeapServiceState_PoorPerformancePause">
            <summary>
            The service has paused itself due to an insufficient frame rate from the hardware.
            @since 3.1.3
            </summary>
        </member>
        <member name="F:LeapInternal.eDistortionMatrixType.eDistortionMatrixType_64x64">
            <summary>
            A 64x64 matrix of pairs of points.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapPolicyFlag.eLeapPolicyFlag_BackgroundFrames">
            <summary>
            Allows frame receipt even when this application is not the foreground application.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapPolicyFlag.eLeapPolicyFlag_Images">
            <summary>
            Allow streaming images
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapPolicyFlag.eLeapPolicyFlag_OptimizeHMD">
            <summary>
            Optimize HMD Policy Flag.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapPolicyFlag.eLeapPolicyFlag_AllowPauseResume">
            <summary>
            Modifies the security token to allow calls to LeapPauseDevice to succeed
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapPolicyFlag.eLeapPolicyFlag_MapPoints">
            <summary>
            Allows streaming map points.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceStatus.eLeapDeviceStatus_Streaming">
            <summary>
            Presently sending frames to all clients that have requested them.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceStatus.eLeapDeviceStatus_Paused">
            <summary>
            Device streaming has been paused.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceStatus.eLeapDeviceStatus_Robust">
            <summary>
            There are known sources of infrared interference. Device has transitioned to
            robust mode in order to compensate.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceStatus.eLeapDeviceStatus_Smudged">
            <summary>
            The device's window is smudged, tracking may be degraded.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceStatus.eLeapDeviceStatus_LowResource">
            <summary>
            The device has entered low-resource mode.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceStatus.eLeapDeviceStatus_UnknownFailure">
            <summary>
            The device has failed, but the failure reason is not known.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceStatus.eLeapDeviceStatus_BadCalibration">
            <summary>
            Bad calibration, cannot send frames.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceStatus.eLeapDeviceStatus_BadFirmware">
            <summary>
            Corrupt firmware and/or cannot receive a required firmware update.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceStatus.eLeapDeviceStatus_BadTransport">
            <summary>
            Exhibiting USB communications issues.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceStatus.eLeapDeviceStatus_BadControl">
            <summary>
            Missing critical control interfaces needed for communication.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapImageType.eLeapImageType_Default">
            <summary>
            Default processed IR image
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapImageType.eLeapImageType_Raw">
            <summary>
            Image from raw sensor values
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapImageFormat.eLeapImageFormat_UNKNOWN">
            <summary>
            An invalid or unknown format.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapImageFormat.eLeapImageType_IR">
            <summary>
            An infrared image.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapImageFormat.eLeapImageType_RGBIr_Bayer">
            <summary>
            A Bayer RGBIr image with uncorrected RGB channels
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapPerspectiveType.eLeapPerspectiveType_invalid">
            <summary>
            An unknown or invalid type.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapPerspectiveType.eLeapPerspectiveType_stereo_left">
            <summary>
            A canonically left image.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapPerspectiveType.eLeapPerspectiveType_stereo_right">
            <summary>
            A canonically right image.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapPerspectiveType.eLeapPerspectiveType_mono">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapCameraCalibrationType.eLeapCameraCalibrationType_infrared">
            Infrared calibration (default). 
        </member>
        <member name="F:LeapInternal.eLeapCameraCalibrationType.eLeapCameraCalibrationType_visual">
            Visual calibration. 
        </member>
        <member name="F:LeapInternal.eLeapLogSeverity.eLeapLogSeverity_Unknown">
            <summary>
            The message severity is not known or was not specified.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapLogSeverity.eLeapLogSeverity_Critical">
            <summary>
            A message about a fault that could render the software or device non-functional.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapLogSeverity.eLeapLogSeverity_Warning">
            <summary>
            A message warning about a condition that could degrade device capabilities.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapLogSeverity.eLeapLogSeverity_Information">
            <summary>
            A system status message.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapValueType.eLeapValueType_Unknown">
            <summary>
            The type is unknown (which is an abnormal condition).
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_Success">
            <summary>
            The operation completed successfully.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_UnknownError">
            <summary>
            An undetermined error has occurred.
            This is usually the result of an abnormal operating condition in LeapC,
            the Leap Motion service, or the host computer itself.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_InvalidArgument">
            <summary>
            An invalid argument was specified.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_InsufficientResources">
            <summary>
            Insufficient resources existed to complete the request.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_InsufficientBuffer">
            <summary>
            The specified buffer was not large enough to complete the request.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_Timeout">
            <summary>
            The requested operation has timed out.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_NotConnected">
            <summary>
            The operation is invalid because there is no current connection.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_HandshakeIncomplete">
            <summary>
            The operation is invalid because the connection is not complete.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_BufferSizeOverflow">
            <summary>
            The specified buffer size is too large.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_ProtocolError">
            <summary>
            A communications protocol error occurred.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_InvalidClientID">
            <summary>
            The server incorrectly specified zero as a client ID.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_UnexpectedClosed">
            <summary>
            The connection to the service was unexpectedly closed while reading or writing a message.
            The server may have terminated.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_UnknownImageFrameRequest">
            <summary>
            The specified request token does not appear to be valid
            
            Provided that the token value which identifies the request itself was, at one point, valid, this
            error condition occurs when the request to which the token refers has already been satisfied or
            is currently being satisfied.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_UnknownTrackingFrameID">
            <summary>
            The specified frame ID is not valid or is no longer valid
            
            Provided that frame ID was, at one point, valid, this error condition occurs when the identifier
            refers to a frame that occurred further in the past than is currently recorded in the rolling
            frame window.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_RoutineIsNotSeer">
            <summary>
            The specified timestamp references a future point in time
            
            The related routine can only operate on time points having occurred in the past, and the
            provided timestamp occurs in the future.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_TimestampTooEarly">
            <summary>
            The specified timestamp references a point too far in the past
            
            The related routine can only operate on time points occurring within its immediate record of
            the past.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_ConcurrentPoll">
            <summary>
            LeapPollConnection is called concurrently.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_NotAvailable">
            <summary>
            A connection to the Leap Motion service could not be established.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_NotStreaming">
            <summary>
            The requested operation can only be performed while the device is sending data.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapRS.eLeapRS_CannotOpenDevice">
            <summary>
            The specified device could not be opened. It is possible that the device identifier
            is invalid, or that the device has been disconnected since being enumerated.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_None">
            <summary>
            No event has occurred within the timeout period specified when calling LeapPollConnection().
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_Connection">
            <summary>
            A connection to the Leap Motion service has been established.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_ConnectionLost">
            <summary>
            The connection to the Leap Motion service has been lost.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_Device">
            <summary>
            A device has been detected or plugged-in.
            A device event is dispatched after a connection is established for any
            devices already plugged in. (The system currently only supports one
            streaming device at a time.)
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_DeviceFailure">
            <summary>
            Note that unplugging a device generates an eLeapEventType_DeviceLost event
            message, not a failure message.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_Policy">
            <summary>
            A policy change has occurred.
            This can be due to setting a policy with LeapSetPolicyFlags() or due to changing
            or policy-related config settings, including images_mode.
            (A user can also change these policies using the Leap Motion Control Panel.)
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_Tracking">
            <summary>
            A tracking frame. The message contains the tracking data for the frame.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_ImageRequestError">
            <summary>
            The request for an image has failed.
            The message contains information about the failure. The client application
            will not receive the requested image set.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_ImageComplete">
            <summary>
            The request for an image is complete.
            The image data has been completely written to the application-provided
            buffer.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_LogEvent">
            <summary>
            A system message.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_DeviceLost">
            <summary>
             The device connection has been lost.
            
            This event is generally asserted when the device has been detached from the system, when the
            connection to the service has been lost, or if the device is closed while streaming. Generally,
            any event where the system can conclude no further frames will be received will result in this
            message. The DeviceEvent field will be filled with the id of the formerly attached device.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_ConfigResponse">
            <summary>
            The asynchronous response to a call to LeapRequestConfigValue().
            Contains the value of requested configuration item.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_ConfigChange">
            <summary>
            The asynchronous response to a call to LeapSaveConfigValue().
            Reports whether the change succeeded or failed.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_DeviceStatusChange">
            <summary>
            Notification that a status change has been detected on an attached device.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_DroppedFrame">
            <summary>
            A tracking frame has been dropped by the service.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_Image">
            <summary>
            Notification that an unrequested stereo image pair is available.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_PointMappingChange">
            <summary>
            Notification that point mapping has changed.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_LogEvents">
            <summary>
            An array of system messages.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapEventType.eLeapEventType_HeadPose">
            <summary>
            A new head pose is available.
            </summary>
        </member>
        <member name="F:LeapInternal.eLeapDeviceFlag.eLeapDeviceFlag_Stream">
            <summary>
            Flag set if the device is presently streaming frames
            
            This flag is updated when the user pauses or resumes tracking on the device from the Leap control
            panel. Modification of this flag will fail if the AllowPauseResume policy is not set on this device
            object.
            </summary>
        </member>
        <member name="T:LeapInternal.StructMarshal`1">
            A helper class to marshal between unmanaged memory and structs without creating garbage.
        </member>
        <member name="P:LeapInternal.StructMarshal`1.Size">
            Returns the size in bytes of the struct of type T.  This call is equivalent to
            Marshal.Sizeof(typeof(T)) but caches the result for ease of access.
        </member>
        <member name="M:LeapInternal.StructMarshal`1.PtrToStruct(System.IntPtr,`0@)">
            Converts an IntPtr to a struct of type T.
        </member>
        <member name="M:LeapInternal.StructMarshal`1.ArrayElementToStruct(System.IntPtr,System.Int32,`0@)">
            Converts a single element in an array pointed to by ptr to a struct
            of type T.  This method does not and cannot do any bounds checking!
            This method does not create any garbage.
        </member>
        <member name="T:MultiLeapWrapper.Vector3f">
            <summary>
            Struct representing vector of floats.
            </summary>
        </member>
        <member name="M:MultiLeapWrapper.Vector3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Vector constructor.
            </summary>
            <param name="x">X component of the vector.</param>
            <param name="y">Y component of the vector.</param>
            <param name="z">Z component of the vector.</param>
        </member>
        <member name="F:MultiLeapWrapper.Vector3f.x">
            <summary>
            X component of the vector.
            </summary>
        </member>
        <member name="F:MultiLeapWrapper.Vector3f.y">
            <summary>
            Y component of the vector.
            </summary>
        </member>
        <member name="F:MultiLeapWrapper.Vector3f.z">
            <summary>
            Z component of the vector.
            </summary>
        </member>
        <member name="T:MultiLeapWrapper.Quaternionf">
            <summary>
            Struct representing quaternion of floats.
            </summary>
        </member>
        <member name="M:MultiLeapWrapper.Quaternionf.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Quaternion constructor.
            </summary>
            <param name="x">X component of the quaternion.</param>
            <param name="y">Y component of the quaternion.</param>
            <param name="z">Z component of the quaternion.</param>
            <param name="w">W component of the quaternion.</param>
        </member>
        <member name="F:MultiLeapWrapper.Quaternionf.x">
            <summary>
            X component of the vector.
            </summary>
        </member>
        <member name="F:MultiLeapWrapper.Quaternionf.y">
            <summary>
            Y component of the vector.
            </summary>
        </member>
        <member name="F:MultiLeapWrapper.Quaternionf.z">
            <summary>
            Z component of the vector.
            </summary>
        </member>
        <member name="F:MultiLeapWrapper.Quaternionf.w">
            <summary>
            W component of the vector.
            </summary>
        </member>
        <member name="T:MultiLeapWrapper.Wrapper">
            <summary>
            Wrapper of the MultiLeap native library.
            </summary>
        </member>
        <member name="T:MultiLeapWrapper.Wrapper.ConnectionCB">
            <summary>
            Callback when connection is established.
            </summary>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="T:MultiLeapWrapper.Wrapper.NativeDeviceCB">
            <summary>
            Callback when a device is connected.
            </summary>
            <param name="device">The connected device.</param>
            <param name="handle">The handle of the device.</param>
            <param name="id">The ID of the device.</param>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="T:MultiLeapWrapper.Wrapper.DeviceCB">
            <summary>
            Callback when a device is connected.
            </summary>
            <param name="device">The connected device.</param>
            <param name="deviceId">The ID of the device.</param>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="T:MultiLeapWrapper.Wrapper.DeviceLostCB">
            <summary>
            Callback when a device is lost.
            </summary>
            <param name="sn">Serial number of the device.</param>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="T:MultiLeapWrapper.Wrapper.DeviceFailureCB">
            <summary>
            Callback when a device fails.
            </summary>
            <param name="deviceFailureEvent">Argument of the failure.</param>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="T:MultiLeapWrapper.Wrapper.TrackingEventCB">
            <summary>
            Callback when tracking event is sent.
            </summary>
            <param name="trackingEvent">The tracking event data.</param>
            <param name="deviceId">The ID of the device that sent the data.</param>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="T:MultiLeapWrapper.Wrapper.FrameCB">
            <summary>
            Callback when tracking frame is sent.
            </summary>
            <param name="frame">The sent tracking frame.</param>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="T:MultiLeapWrapper.Wrapper.LogMessageCB">
            <summary>
            Callback when log message is sent.
            </summary>
            <param name="severity">The severity of the log event.</param>
            <param name="timestamp">The timestamp of the log event.</param>
            <param name="message">The log message.</param>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="T:MultiLeapWrapper.Wrapper.CalibrationSampleCB">
            <summary>
            Callback when calibration sample loop is ran.
            </summary>
            <param name="deviceCount">Number of devices that are being calibrated.</param>
            <param name="ids">IDs of devices that are being calibrated.</param>
            <param name="completion">Array of completion of the calibration. The indexes correspond to the indexes in ids array.</param>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="T:MultiLeapWrapper.Wrapper.PolicyCB">
            <summary>
            Callback when policy message is sent.
            </summary>
            <param name="currentPolicies">The current policies info.</param>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="T:MultiLeapWrapper.Wrapper.ConfigChangeCB">
            <summary>
            Callback when config changes.
            </summary>
            <param name="requestID">ID of the request</param>
            <param name="success">The status of the change.</param>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="T:MultiLeapWrapper.Wrapper.ConfigResponseCB">
            <summary>
            Callback when config change result is sent.
            </summary>
            <param name="requestID">ID of the request</param>
            <param name="value">The value of the variant.</param>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="T:MultiLeapWrapper.Wrapper.ImageCB">
            <summary>
            Callback when image is sent.
            </summary>
            <param name="image_event">The sent image information.</param>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="T:MultiLeapWrapper.Wrapper.PointMappingChangeCB">
            <summary>
            Callback when point mapping changes is sent.
            </summary>
            <param name="point_mapping_change_event">The point mapping change information.</param>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="E:MultiLeapWrapper.Wrapper.OnConnection">
            <summary>
            Event raised when connection is established.
            </summary>
        </member>
        <member name="E:MultiLeapWrapper.Wrapper.OnConnectionLost">
            <summary>
            Event raised when connection is lost.
            </summary>
        </member>
        <member name="E:MultiLeapWrapper.Wrapper.OnDevice">
            <summary>
            Event raised when a device is connected.
            </summary>
        </member>
        <member name="E:MultiLeapWrapper.Wrapper.OnDeviceLost">
            <summary>
            Event raised when a device is lost.
            </summary>
        </member>
        <member name="E:MultiLeapWrapper.Wrapper.OnDeviceFailure">
            <summary>
            Event raised when a device fails.
            </summary>
        </member>
        <member name="E:MultiLeapWrapper.Wrapper.OnFrame">
            <summary>
            Event raised when tracking frame is sent.
            </summary>
        </member>
        <member name="E:MultiLeapWrapper.Wrapper.OnLogMessage">
            <summary>
            Event raised when a log message is sent.
            </summary>
        </member>
        <member name="E:MultiLeapWrapper.Wrapper.OnCalibrationSample">
            <summary>
            Event raised when calibration sample loop is ran.
            </summary>
        </member>
        <member name="E:MultiLeapWrapper.Wrapper.OnPolicy">
            <summary>
            Event raised when policy changes.
            </summary>
        </member>
        <member name="E:MultiLeapWrapper.Wrapper.OnConfigChange">
            <summary>
            Event raised when config changes.
            </summary>
        </member>
        <member name="E:MultiLeapWrapper.Wrapper.OnConfigResponse">
            <summary>
            Event raised when a config change response is sent.
            </summary>
        </member>
        <member name="E:MultiLeapWrapper.Wrapper.OnImage">
            <summary>
            Event raised when an image is sent.
            </summary>
        </member>
        <member name="E:MultiLeapWrapper.Wrapper.OnPointMapping">
            <summary>
            Event raised when a point mapping message is connected.
            </summary>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.InitCallbacksConnection(MultiLeapWrapper.Wrapper.ConnectionCB,MultiLeapWrapper.Wrapper.ConnectionCB,MultiLeapWrapper.Wrapper.NativeDeviceCB,MultiLeapWrapper.Wrapper.DeviceLostCB,MultiLeapWrapper.Wrapper.DeviceFailureCB,MultiLeapWrapper.Wrapper.TrackingEventCB,MultiLeapWrapper.Wrapper.LogMessageCB,MultiLeapWrapper.Wrapper.CalibrationSampleCB,System.IntPtr)">
            <summary>
            Initialize the library and register all Leap Motion callbacks.
            This version of init will start a thread that polls the Leap Motion Service and handles the callbacks invocation.
            </summary>
            <param name="onConnection">Callback called on successful conection.</param>
            <param name="onConnectionLost">Callback called on connection lost.</param>
            <param name="onDevice">Callback called on device connection.</param>
            <param name="onDeviceLost">Callback called on device lost.</param>
            <param name="onDeviceFailure">Callback called on device failure.</param>
            <param name="onTrackingEvent">Callback called on tracking event.</param>
            <param name="onLogMessage">Callback called on sent log message.</param>
            <param name="onCalibrationSample">Callback called on sent calibration sample message.</param>
            <param name="context">Pointer to the context of the connection (can be null).</param>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.InitPollingConnection(MultiLeapWrapper.Wrapper.CalibrationSampleCB,System.IntPtr)">
            <summary>
            Initialize the library.
            This version does not start the underlying thread and the polling should be handled by the client
            via the PollLeapMotionMessages function.
            </summary>
            <param name="onCalibrationSample">Callback called on sent calibration sample message.</param>
            <param name="context">Pointer to the context of the connection (can be null).</param>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.SetCallbacksInternal(MultiLeapWrapper.Wrapper.ConnectionCB,MultiLeapWrapper.Wrapper.ConnectionCB,MultiLeapWrapper.Wrapper.NativeDeviceCB,MultiLeapWrapper.Wrapper.DeviceLostCB,MultiLeapWrapper.Wrapper.DeviceFailureCB,MultiLeapWrapper.Wrapper.TrackingEventCB,MultiLeapWrapper.Wrapper.LogMessageCB,MultiLeapWrapper.Wrapper.CalibrationSampleCB,MultiLeapWrapper.Wrapper.PolicyCB,MultiLeapWrapper.Wrapper.ConfigChangeCB,MultiLeapWrapper.Wrapper.ConfigResponseCB,MultiLeapWrapper.Wrapper.ImageCB,MultiLeapWrapper.Wrapper.PointMappingChangeCB)">
            <summary>
            Initialize the library and register all Leap Motion callbacks.
            </summary>
            <param name="onConnection">Callback called on successful conection.</param>
            <param name="onConnectionLost">Callback called on connection lost.</param>
            <param name="onDevice">Callback called on device connection.</param>
            <param name="onDeviceLost">Callback called on device lost.</param>
            <param name="onDeviceFailure">Callback called on device failure.</param>
            <param name="onTrackingEvent">Callback called on tracking event.</param>
            <param name="onLogMessage">Callback called on sent log message.</param>
            <param name="onCalibrationSample">Callback called on sent calibration sample message.</param>
            <param name="onPolicy">Callback called on device policy.</param>
            <param name="onConfigChange">Callback called on config change.</param>
            <param name="onConfigResponse">Callback called on config change response.</param>
            <param name="onImage">Callback called on sent image.</param>
            <param name="onPointMapping">Callback called on point mapping change.</param>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.Test">
            <summary>
            Tests the underlying library.
            </summary>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.TestAdd(System.Int32,System.Int32)">
            <summary>
            Tests the underlying library.
            </summary>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.Deinit">
            <summary>
            Deinitializes the underlying library.
            </summary>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.PollLeapMotionMessagesInternal(LeapInternal.LEAP_CONNECTION_MESSAGE@,System.UInt32)">
            <summary>
            Poll for a message from the Leap Motion Service. 
            </summary>
            <param name="message">Pointer to be filled.</param>
            <param name="timeout">Timeout of the poll in milliseconds.</param>
            <returns>Result of the internal poll.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.CalibrateDevicesInternal(System.Int32)">
            <summary>
            Calibrate the connected devices.
            </summary>
            <param name="sampleCount">How many samples should be taken.</param>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.MergeHandsInternal(System.Boolean)">
            <summary>
            Set the merge status the corresponding hands from the devices.
            </summary>
            <param name="merge">If the hands should be merged or not.</param>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetDevicesInternal(LeapInternal.LEAP_DEVICE_INFO[],System.Int32[],System.Int32@)">
            <summary>
            Get the info about the devices. Should be called three times:
            1) First time with nullptr arays to get the count of devices.
            2) Second time with allocated arrays to get the size of serial numbers. The serial number atributtes should be set to null.
            3) Third time with allocated serial number arrays.
            </summary>
            <param name="deviceInfo">Array of the devices.</param>
            <param name="idsArray">Array of the devices ids.</param>
            <param name="count">The number of the connected devices.</param>
            <returns>True on success, false otherwise (e.g. a not enough memory.).</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetDeviceInternal(System.UInt32,LeapInternal.LEAP_DEVICE_INFO@)">
            <summary>
            Get the info about a device with the specified serial number.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="deviceInfo">The pointer store the device info.</param>
            <returns>True on success, false otherwise (e.g. the device with provided serial number not found or device not initialized).</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.SetDeviceStatusInternal(System.UInt32,System.Boolean)">
            <summary>
            Set the device status.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="enabled">If the device should be enabled or not.</param>
            <returns>True on success, false otherwise (e.g. a device with provided serial number does not exist).</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.SetDeviceTransformationInternal(System.UInt32,System.String)">
            <summary>
            Set the device's translation, rotation and scale.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="transformation">The transformation of the device.</param>
            <returns>True on success, false otherwise (e.g. a device with provided serial number does not work).</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetDeviceTransformationInternal(System.UInt32,System.IntPtr,System.Int32@)">
            <summary>
            Get the device's translation, rotation and scale.
            Call this method first with empty result argument to determine the length of the result.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="result">The transformation of the device as a char array.</param>
            <param name="length">The length of the result in characters.</param>
            <returns>True on success, false otherwise (e.g. a device with provided serial number does not work).</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.SetDeviceTransformationRawInternal(System.UInt32,MultiLeapWrapper.Vector3f,MultiLeapWrapper.Quaternionf)">
            <summary>
            Set the device's translation and rotation.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="position">Vector representing the position of the device.</param>
            <param name="rotation">Quaternion representing the rotation of the device.</param>
            <returns>True on success, false otherwise (e.g. a device with provided id does not exist).</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetDeviceTransformationRawInternal(System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Get the device's translation, rotation.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="position">Vector representing the position of the device.</param>
            <param name="rotation">Quaternion representing the rotation of the device.</param>
            <returns>True on success, false otherwise (e.g. a device with provided id does not exist or data structures are not initialized).</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetInterpolatedFrameSizeInternal(System.UInt32,System.Int64)">
            <summary>
            Get size for interpolated frame for set time.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="time">The time of the frame.</param>
            <returns>The interpolated frame.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetInterpolatedFrameInternal(System.UInt32,System.Int64)">
            <summary>
            Get interpolated frame for set time.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="time">The time of the frame.</param>
            <returns>The interpolated frame.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetInterpolatedFrameFromTimeInternal(System.UInt32,System.Int64,System.Int64)">
            <summary>
            Get interpolated frame for set time.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="time">The time of the frame.</param>
            <param name="sourceTime">The source time of the frame.</param>
            <returns>The interpolated frame.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetLeapNowInternal">
            <summary>
            Get current Leap Timestamp;
            </summary>
            <returns>Current Leap time.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetPivotIdInternal">
            <summary>
            Get current reference device ID;
            </summary>
            <returns>The ID.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.SetPivotIdInternal(System.Int32)">
            <summary>
            Set reference device by it's ID;
            </summary>
            <param name="id">The desired reference device ID.</param>
            <returns>False when ID does not exist or when ID of virtual device was provided, true otherwise.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetVirtualDeviceIdInternal">
            <summary>
            Get current virtual device ID;
            </summary>
            <returns>The ID.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.#ctor(MultiLeapWrapper.Wrapper.ConnectionCB,MultiLeapWrapper.Wrapper.ConnectionCB,MultiLeapWrapper.Wrapper.DeviceCB,MultiLeapWrapper.Wrapper.DeviceLostCB,MultiLeapWrapper.Wrapper.DeviceFailureCB,MultiLeapWrapper.Wrapper.FrameCB,MultiLeapWrapper.Wrapper.LogMessageCB,MultiLeapWrapper.Wrapper.CalibrationSampleCB,System.IntPtr)">
            <summary>
            Initialize the library and register all Leap Motion callbacks.
            This version of init will start a thread that polls the Leap Motion Service and handles the callbacks invocation.
            </summary>
            <param name="onConnection">Callback when connection is initialized.</param>
            <param name="onConnectionLost">Callback when connection is lost.</param>
            <param name="onDevice">Callback when device is connected.</param>
            <param name="onDeviceLost">Callback when device is lost.</param>
            <param name="onDeviceFailure">Callback when device fails.</param>
            <param name="onFrame">Callback when frame is sent.</param>
            <param name="onCalibrationSample">Callback when calibration sample message is sent.</param>
            <param name="onLogMesssage">Callback when log sample message is sent.</param>
            <param name="context">Pointer to the context of the connection (can be null).</param>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.#ctor(MultiLeapWrapper.Wrapper.CalibrationSampleCB,System.IntPtr)">
            <summary>
            Initialize the library.
            This version does not start the underlying thread and the polling should be handled by the client
            via the PollLeapMotionMessages function.
            </summary>
            <param name="onCalibrationSample">Callback when calibration sample message is sent.</param>
            <param name="context">Pointer to the context of the connection (can be null).</param>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.Wrapper_OnNativeDeviceInternal(LeapInternal.LEAP_DEVICE_INFO,System.IntPtr,System.UInt32,System.IntPtr)">
            <summary>
            Internal callback that transform Leap Device Info event to Leap Device.
            </summary>
            <param name="device">The connected device.</param>
            <param name="handle">The device handle.</param>
            <param name="deviceId">The ID of the device.</param>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.SetCallbacks">
            <summary>
            Set internalCallbacks
            </summary>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.Wrapper_OnTrackingEventInternal(LeapInternal.LEAP_TRACKING_EVENT,System.UInt32,System.IntPtr)">
            <summary>
            Internal callback that transform Leap Tracking event to Leap Frame.
            </summary>
            <param name="trackingEvent">The tracking event.</param>
            <param name="deviceId">The id of the device.</param>
            <param name="context">The context of the connection.</param>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.PollLeapMotionMessages(LeapInternal.LEAP_CONNECTION_MESSAGE@,System.UInt32)">
            <summary>
            Poll for a message from the Leap Motion Service. 
            </summary>
            <param name="message">The Leap Message struct to be filled.</param>
            <param name="timeout">Timeout of the poll in milliseconds.</param>
            <returns>Result of the internal poll.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.CalibrateDevices(System.Int32)">
            <summary>
            Calibrate the connected devices.
            </summary>
            <param name="sampleCount">Number of samples to be taken. Default value is 200.</param>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.MergeHands(System.Boolean)">
            <summary>
            Set the merge status the corresponding hands from the devices.
            </summary>
            <param name="merge">If the hands should be merged or not.</param>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.SetDeviceStatus(System.UInt32,System.Boolean)">
            <summary>
            Set the device status.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="enabled">If the device should be enabled or not.</param>
            <returns>True on success, false otherwise (e.g. a device with provided serial number does not exist).</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.SetDeviceTransformation(System.UInt32,System.String)">
            <summary>
            Set the device's translation, rotation and scale.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="transformation">The transformation of the device.</param>
            <returns>True on success, false otherwise (e.g. a device with provided serial number does not work).</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetDeviceTransformation(System.UInt32,System.String@)">
            <summary>
            Get the device's translation, rotation and scale.
            Call this method first with empty result argument to determine the length of the result.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="result">The transformation of the device as a char array.</param>
            <returns>True on success, false otherwise (e.g. a device with provided serial number does not work).</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.SetDeviceTransformationRaw(System.UInt32,MultiLeapWrapper.Vector3f,MultiLeapWrapper.Quaternionf)">
            <summary>
            Set the device's translation and rotation.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="position">Vector representing the position of the device.</param>
            <param name="rotation">Quaternion representing the rotation of the device.</param>
            <returns>True on success, false otherwise (e.g. a device with provided id does not exist).</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetDeviceTransformationRaw(System.UInt32,MultiLeapWrapper.Vector3f@,MultiLeapWrapper.Quaternionf@)">
            <summary>
            Get the device's translation, rotation.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="position">Vector representing the position of the device.</param>
            <param name="rotation">Quaternion representing the rotation of the device.</param>
            <returns>True on success, false otherwise (e.g. a device with provided id does not exist or data structures are not initialized).</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetInterpolatedFrameSize(System.UInt32,System.Int64)">
            <summary>
            Get size for interpolated frame for set time.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="time">The time of the frame.</param>
            <returns>The interpolated frame.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetInterpolatedFrame(System.UInt32,System.Int64)">
            <summary>
            Get interpolated frame for set time.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="time">The time of the frame.</param>
            <returns>The interpolated frame.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetInterpolatedFrameFromTime(System.UInt32,System.Int64,System.Int64)">
            <summary>
            Get interpolated frame for set time.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="time">The time of the frame.</param>
            <param name="sourceTime">The source time of the frame.</param>
            <returns>The interpolated frame.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetLeapNow">
            <summary>
            Get current Leap Timestamp;
            </summary>
            <returns>Current Leap time.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetDevices(Leap.Device[]@,System.Int32[]@)">
            <summary>
            Get info about the connected devices.
            </summary>
            <param name="devices">The array that should be populated by the device info.</param>
            <param name="ids">The array that should be populated by the device ids.</param>
            <returns>True on success, false otherwise (e.g. the array is not large enough).</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetDevice(System.UInt32,Leap.Device@)">
            <summary>
            Get info about device with specified serial number.
            </summary>
            <param name="id">The ID of the device.</param>
            <param name="device">The structure that should be populated by the device info.</param>
            <returns>True on success, false otherwise (e.g. the array is not large enough).</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetPivotDeviceId">
            <summary>
            Get current reference device ID;
            </summary>
            <returns>The ID.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.SetPivotId(System.Int32)">
            <summary>
            Set reference device by it's ID;
            </summary>
            <param name="id">The desired reference device ID.</param>
            <returns>False when ID does not exist or when ID of virtual device was provided, true otherwise.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetVirtualDeviceId">
            <summary>
            Get current virtual device ID;
            </summary>
            <returns>The ID.</returns>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.Dispose(System.Boolean)">
            <summary>
            Dispose of the internal resources.
            </summary>
            <param name="disposing">If the library is already disposing it's values.</param>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.Finalize">
            <summary>
            The wrapper destructor.
            </summary>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.Dispose">
            <summary>
            Dispose of the wrapper resources.
            This code added to correctly implement the disposable pattern.
            </summary>
        </member>
        <member name="M:MultiLeapWrapper.Wrapper.GetDllVersion">
            <summary>
            Query the MultiLeapWrapper library version.
            </summary>
            <returns>A string containing the library version in format major.minor.bugfix.buildno (e.g. 1.7.0.1).</returns>
        </member>
        <member name="T:MultiLeapWrapper.Version">
            <summary>
            Version file of MultiLeapWrapper.
            File generated by CI during build.
            Create your local version from provided template.
            </summary>
        </member>
        <member name="F:MultiLeapWrapper.Version.Major">
            <summary>
            Major version number
            </summary>
        </member>
        <member name="F:MultiLeapWrapper.Version.Minor">
            <summary>
            Minor version number
            </summary>
        </member>
        <member name="F:MultiLeapWrapper.Version.Bugfix">
            <summary>
            Bugfix version number
            </summary>
        </member>
        <member name="F:MultiLeapWrapper.Version.BuildNumber">
            <summary>
            Build version number
            </summary>
        </member>
        <member name="F:MultiLeapWrapper.Version.BuildType">
            <summary>
            Build type (branch)
            </summary>
        </member>
        <member name="F:MultiLeapWrapper.Version.VcsVersion">
            <summary>
            VCS version (git hash)
            </summary>
        </member>
        <member name="F:MultiLeapWrapper.Version.BuildDate">
            <summary>
            Date of build
            </summary>
        </member>
    </members>
</doc>
